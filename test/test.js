const assert = require("assert");
const nodemailer = require("nodemailer");
const request = require("supertest");

const mailsacAPIKey = ""; // Generated by mailsac. See https://mailsac.com/api-keys
const mailsacToAddress = "example@mailsac.com"; // Mailsac email address where the email will be sent
const smtpUserName = ""; // Username for smtp server authentication
const smtpPassword = ""; // Password for smtp server authentication
const smtpHost = ""; // hostname of the smtp server
const smtpPort = 587; // port the smtp is listening on

describe("send email to mailsac", function () {
  afterEach(function () {
    /* delete all messages in the inbox after the test runs to prevent leaky tests.
       This requires the inbox to private, which is a paid feature of Mailsac.
       The afterEach section could be omitted if using a public address
    */
    return request("https://mailsac.com")
      .delete(`/api/addresses/${mailsacToAddress}/messages`)
      .set("Mailsac-Key", mailsacAPIKey)
      .expect(204);
  });
  this.timeout(100000); // test can take a long time to run. This increases the default timeout for mocha
  it("sends passwords with link to mailsac website", function () {
    // Checks to see if they email was received with a retry every ~10 seconds for 10 attempts.
    const wait = (millis) =>
      new Promise((resolve) => setTimeout(resolve, millis));
    const checkNewMessage = async (httpRequestFn) => {
      for (let i = 0; i < 10; i++) {
        const res = await httpRequestFn();
        if (res.body.length) return res.body;
        await wait(9950);
      }
      throw new Error("it never happened");
    };

    async function sendMail() {
      // create a transporter object using the default SMTP transport
      const transport = nodemailer.createTransport({
        host: smtpHost,
        port: smtpPort,
        auth: {
          user: smtpUserName,
          pass: smtpPassword,
        },
      });
      // send mail using the defined transport object
      return (info = await transport.sendMail({
        from: smtpUserName, // sender address
        to: mailsacToAddress, // recipient address
        subject: "Hello!",
        text: "Checkout https://mailsac.com",
        html: "Checkout <a href https://mailsac.com>Mailsac.com</a>",
      }));
    }

    // calls sendMail function to send an email using nodemailer. the sendMail function includes the transport configuration for the smtp server
    return sendMail()
      .then((result) => {
        console.log("Sent email with messageId: ", result.messageId); // logs the messageId of the email, confirming the email was submitted to the smtp server
      })
      .then(() => {
        // returns the JSON object of the email from mailsac. The checkNewMessage function provides a retry mechanism while the email makes its way through the interwebs
        return checkNewMessage(() =>
          request("https://mailsac.com")
            .get(`/api/addresses/${mailsacToAddress}/messages`)
            .set("Mailsac-Key", mailsacAPIKey)
        ).then((messages) => {
          // After a message is retrieved from mailsac, the JSON object is checked to see if the link was parsed from the email and it is the correct link 
          const link = messages?.[0]?.links.find((l) => "https://mailsac.com");
          assert(link, "Missing / Incorrect link in email");
        });
      })
      .catch((error) => {
        console.log(error); // log errors to console
      });
  });
});
